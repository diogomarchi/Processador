------------------------------------------------
-- Design: MDC CONTROL
-- Entity: mdc_control 
-- Author: Diogo & George
-- Rev.  : 1.0
-- Date  : 05/31/2020
------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;

entity mdc_control is 
port ( i_CLK   : in std_logic; -- input clock
       i_CLR_n : in std_logic; -- input clear/reset
       i_GO    : in std_logic; -- go input	
       i_X_EQ_Y: in std_logic; -- x equal y input
       i_X_LT_Y: in std_logic; -- x less than y input
       o_RDY   : out std_logic;  -- ready output
       o_X_SEL : out std_logic;  -- x input or sub selector
       o_Y_SEL : out std_logic;  -- y input or sub selector
       o_X_LD  : out std_logic;  -- x register enable
       o_Y_LD  : out std_logic;  -- y register enable
       o_D_LD  : out std_logic   -- result register enable
       ); 
end mdc_control;

architecture rtl of mdc_control is
  type t_STATE is (s_0, s_1, s_2, s_3, s_4);
  signal r_STATE: t_STATE;  -- state register
  signal w_NEXT : t_STATE;  -- next state  

begin
  
  p_STATE : process (i_CLK, i_CLR_n)
  begin
  
    if (i_CLR_n ='0') then
      r_STATE <= s_0;     --initial state
    elsif (rising_edge(i_CLK)) then
      r_STATE <= w_NEXT;  --next state
    end if;
  end process;
  
  
  p_NEXT : process(r_STATE, i_GO, i_X_EQ_Y, i_X_LT_Y)    
  begin   	
    case (r_STATE) is
      when s_0 =>        
        if (i_GO = '1') then					 
           w_NEXT  <= s_1;
        else 
		     w_NEXT  <= s_0;
        end if;                
		
		when s_1 =>         
        if (i_X_EQ_Y = '1') then    -- caso X = Y
          w_NEXT <= s_4;
        elsif (i_X_LT_Y = '1') then -- caso X < Y
          w_NEXT <= s_3;
        else                        -- caso X > Y
          w_NEXT <= s_2;
        end if;
				  
      when s_2 => 
               w_NEXT <= s_1;	        
						
      when s_3 =>	
               w_NEXT <= s_1;		
						
      when s_4 => 
               w_NEXT <= s_0;	
						
      when others => 
               w_NEXT <= s_0;
    end case;   		
  end process;
  
  -- SINALIZA QUE O RESULTADO FOI ENCONTRADO
  o_RDY   <= '1' when (r_STATE = s_0 or r_STATE = s_4) else '0';  

  -- SINALIZA QUE O VALOR DE X DEVE SER CARREGADO NO REGISTRADOR X
  o_X_LD  <= '1' when (r_STATE = s_0 or r_STATE = s_2) else '0';
  
  -- SINALIZA QUE O VALOR DE Y DEVE SER CARREGADO NO REGISTRADOR Y
  o_Y_LD  <= '1' when (r_STATE = s_0 or r_STATE = s_3) else '0';
  
  -- SINALIZA QUE O VALOR DE Y DEVE SER CARREGADO NO REGISTRADOR DE RESULTADO
  o_D_LD  <= '1' when (r_STATE = s_4) else '0';
  
  -- REALIZA SELEÇÃO ENTRE ENTRADA X E RESULTADO DA SUBTRAÇÃO	
  o_X_SEL <= '1' when (r_STATE = s_2) else '0';
  
  -- REALIZA SELEÇÃO ENTRE ENTRADA Y E RESULTADO DA SUBTRAÇÃO
  o_Y_SEL <= '1' when (r_STATE = s_3) else '0';
  
end rtl;

